{
	"name": "df_order_raw_to_clean",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_raw_order",
						"type": "DatasetReference"
					},
					"name": "rawOrder"
				},
				{
					"dataset": {
						"referenceName": "ds_raw_order_item",
						"type": "DatasetReference"
					},
					"name": "rawOrderItems"
				},
				{
					"dataset": {
						"referenceName": "ds_raw_stores",
						"type": "DatasetReference"
					},
					"name": "rawStore"
				},
				{
					"dataset": {
						"referenceName": "ds_raw_products",
						"type": "DatasetReference"
					},
					"name": "rawProduct"
				},
				{
					"dataset": {
						"referenceName": "ds_raw_customer",
						"type": "DatasetReference"
					},
					"name": "rawCustomer"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_clean_orders",
						"type": "DatasetReference"
					},
					"name": "cleanOrder"
				},
				{
					"dataset": {
						"referenceName": "ds_clean_ordered_item",
						"type": "DatasetReference"
					},
					"name": "cleanOrderItems"
				},
				{
					"dataset": {
						"referenceName": "ds_clean_stores",
						"type": "DatasetReference"
					},
					"name": "cleanStore"
				},
				{
					"dataset": {
						"referenceName": "ds_clean_products",
						"type": "DatasetReference"
					},
					"name": "cleanProduct"
				},
				{
					"dataset": {
						"referenceName": "ds_clean_customer",
						"type": "DatasetReference"
					},
					"name": "cleanCustomer"
				}
			],
			"transformations": [
				{
					"name": "OrderDateandCurrentTimestamp"
				},
				{
					"name": "filterRecords"
				},
				{
					"name": "UpdatedTimestamp"
				},
				{
					"name": "filterandreorder"
				},
				{
					"name": "storeUpdatedTimestamp"
				},
				{
					"name": "rearrange"
				},
				{
					"name": "productTimestamp"
				},
				{
					"name": "castOrder"
				},
				{
					"name": "castOrderItem"
				},
				{
					"name": "castStore"
				},
				{
					"name": "castProduct"
				},
				{
					"name": "castCustomer"
				},
				{
					"name": "CustomerderivedColumer"
				}
			],
			"scriptLines": [
				"source(output(",
				"          ORDER_ID as string,",
				"          ORDER_DATETIME as string,",
				"          CUSTOMER_ID as string,",
				"          ORDER_STATUS as string,",
				"          STORE_ID as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> rawOrder",
				"source(output(",
				"          ORDER_ID as short,",
				"          LINE_ITEM_ID as short,",
				"          PRODUCT_ID as short,",
				"          UNIT_PRICE as double,",
				"          QUANTITY as short",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> rawOrderItems",
				"source(output(",
				"          LATITUDE as double,",
				"          LONGITUDE as double,",
				"          STORE_ID as short,",
				"          STORE_NAME as string,",
				"          WEB_ADDRESS as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     documentForm: 'documentPerLine') ~> rawStore",
				"source(output(",
				"          PRODUCT_ID as short,",
				"          PRODUCT_NAME as string,",
				"          UNIT_PRICE as double",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     documentForm: 'documentPerLine') ~> rawProduct",
				"source(output(",
				"          CUSTOMER_ID as short,",
				"          EMAIL_ADDRESS as string,",
				"          FULL_NAME as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     documentForm: 'documentPerLine') ~> rawCustomer",
				"rawOrder derive(ORDER_DATE = toDate(ORDER_DATETIME, 'DD-MMM-yy HH.mm.ss'),",
				"          UPDATED_TIMESTAMP = currentUTC()) ~> OrderDateandCurrentTimestamp",
				"castOrder select(mapColumn(",
				"          ORDER_ID,",
				"          ORDER_DATE,",
				"          CUSTOMER_ID,",
				"          ORDER_STATUS,",
				"          STORE_ID,",
				"          UPDATED_TIMESTAMP",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> filterRecords",
				"rawOrderItems derive(UPDATED_TIMESTAMP = currentUTC()) ~> UpdatedTimestamp",
				"castOrderItem select(mapColumn(",
				"          ORDER_ID,",
				"          PRODUCT_ID,",
				"          UNIT_PRICE,",
				"          QUANTITY,",
				"          UPDATED_TIMESTAMP",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> filterandreorder",
				"rawStore derive(UPDATED_TIMESTAMP = currentUTC()) ~> storeUpdatedTimestamp",
				"storeUpdatedTimestamp select(mapColumn(",
				"          STORE_ID,",
				"          STORE_NAME,",
				"          LATITUDE,",
				"          LONGITUDE,",
				"          UPDATED_TIMESTAMP",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> rearrange",
				"rawProduct derive(UPDATED_TIMESTAMP = currentUTC()) ~> productTimestamp",
				"OrderDateandCurrentTimestamp cast(output(",
				"          ORDER_ID as integer,",
				"          ORDER_DATETIME as string,",
				"          CUSTOMER_ID as integer,",
				"          ORDER_STATUS as string,",
				"          STORE_ID as integer,",
				"          ORDER_DATE as date,",
				"          UPDATED_TIMESTAMP as timestamp",
				"     ),",
				"     errors: true) ~> castOrder",
				"UpdatedTimestamp cast(output(",
				"          ORDER_ID as integer,",
				"          LINE_ITEM_ID as integer,",
				"          PRODUCT_ID as integer,",
				"          UNIT_PRICE as double,",
				"          QUANTITY as integer,",
				"          UPDATED_TIMESTAMP as timestamp",
				"     ),",
				"     errors: true) ~> castOrderItem",
				"rearrange cast(output(",
				"          STORE_ID as integer,",
				"          STORE_NAME as string,",
				"          LATITUDE as double,",
				"          LONGITUDE as double,",
				"          UPDATED_TIMESTAMP as timestamp",
				"     ),",
				"     errors: true) ~> castStore",
				"productTimestamp cast(output(",
				"          PRODUCT_ID as integer,",
				"          PRODUCT_NAME as string,",
				"          UNIT_PRICE as double,",
				"          UPDATED_TIMESTAMP as timestamp",
				"     ),",
				"     errors: true) ~> castProduct",
				"rawCustomer cast(output(",
				"          CUSTOMER_ID as integer,",
				"          EMAIL_ADDRESS as string,",
				"          FULL_NAME as string",
				"     ),",
				"     errors: true) ~> castCustomer",
				"castCustomer derive(UPDATED_TIMESTAMP = currentUTC()) ~> CustomerderivedColumer",
				"filterRecords sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> cleanOrder",
				"filterandreorder sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          ORDER_ID as integer,",
				"          PRODUCT_ID as integer,",
				"          UNIT_PRICE as double,",
				"          QUANTITY as integer,",
				"          UPDATED_TIMESTAMP as timestamp",
				"     ),",
				"     format: 'parquet',",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> cleanOrderItems",
				"castStore sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> cleanStore",
				"castProduct sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> cleanProduct",
				"CustomerderivedColumer sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          CUSTOMER_ID as integer,",
				"          EMAIL_ADDRESS as string,",
				"          FULL_NAME as string,",
				"          UPDATED_TIMESTAMP as timestamp",
				"     ),",
				"     format: 'parquet',",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> cleanCustomer"
			]
		}
	}
}